import streamlit as st
from PIL import Image, ImageDraw, ImageFont
import easyocr
import numpy as np
import requests
from io import BytesIO

# ==== Load OCR Reader (Thai + English) ====
@st.cache_resource
def load_reader():
    return easyocr.Reader(['th', 'en'], gpu=False)

reader = load_reader()

# ==== Sample Images ====
sample_images = {
    "‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 1": "https://www.iri.com/blog/wp-content/uploads/2021/12/darkshield-ocr-image-preprocessing-visa-original-768x511.jpg",
    "‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 2": "https://www.iri.com/blog/wp-content/uploads/2021/12/darkshield-ocr-image-preprocessing-final-skewed-result-714x350.png",
    "‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 3": "https://www.iri.com/blog/wp-content/uploads/2021/12/darkshield-ocr-image-preprocessing-fig-3.png"
}

# ==== Sidebar: Keyword Input ====
st.sidebar.header("üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡πÉ‡∏ô‡∏†‡∏≤‡∏û")
search_keyword = st.sidebar.text_input("‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)")

# ==== Main Title ====
st.title("üöó Text Recognition (OCR) with Keyword Search")
st.write("OCR ‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏û + ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)")

# ==== OCR Processing for All Images ====
ocr_results = []

with st.spinner("üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û..."):
    for label, url in sample_images.items():
        try:
            response = requests.get(url)
            image = Image.open(BytesIO(response.content)).convert("RGB")
        except:
            st.warning(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î {label} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            continue
        
        img_array = np.array(image)
        results = reader.readtext(img_array)

        text_data = []
        for bbox, text, conf in results:
            text_data.append({
                "bbox": bbox,
                "text": text,
                "conf": conf
            })

        ocr_results.append({
            "label": label,
            "image": image,
            "text_data": text_data
        })

st.success("‚úÖ OCR ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß!")

# ==== Search Keyword ====
if search_keyword:
    st.info(f"üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤: **{search_keyword}**")

    found_any = False

    for result in ocr_results:
        label = result["label"]
        image = result["image"].copy()  # ‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏†‡∏≤‡∏û ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏î‡∏ú‡∏•
        text_data = result["text_data"]

        draw = ImageDraw.Draw(image)
        try:
            font = ImageFont.truetype("arial.ttf", 30)
        except:
            font = ImageFont.load_default()

        matched = False
        for item in text_data:
            text = item["text"]
            bbox = item["bbox"]
            if search_keyword.lower() in text.lower():
                matched = True
                found_any = True
                points = [tuple(point) for point in bbox]
                draw.line(points + [points[0]], fill="red", width=3)
                draw.text(points[0], text, fill="yellow", font=font)

        if matched:
            st.image(image, caption=f"üì∏ ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡πÉ‡∏ô: {label}", use_container_width=True)

    if not found_any:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡πÉ‡∏î ‡πÜ")

else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

# ==== ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà OCR ‡∏û‡∏ö‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏û (‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏°) ====
st.divider()
st.write("## üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏à‡∏≤‡∏Å OCR ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏û")
for result in ocr_results:
    label = result["label"]
    text_data = result["text_data"]
    st.write(f"### üìå {label}")
    if text_data:
        for idx, item in enumerate(text_data, start=1):
            st.write(f"{idx}. **{item['text']}** ({item['conf']*100:.2f}%)")
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
