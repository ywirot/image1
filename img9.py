import streamlit as st
from PIL import Image, ImageDraw, ImageFont
import easyocr
import numpy as np
import requests
from io import BytesIO

# ==== Load OCR Reader (Thai + English) ====
@st.cache_resource
def load_reader():
    return easyocr.Reader(['th', 'en'], gpu=False)

reader = load_reader()

# ==== Sample Images ====
sample_images = {
    "‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 1": "https://www.iri.com/blog/wp-content/uploads/2021/12/darkshield-ocr-image-preprocessing-visa-original-768x511.jpg",
    "‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 2": "https://www.iri.com/blog/wp-content/uploads/2021/12/darkshield-ocr-image-preprocessing-final-skewed-result-714x350.png",
    "‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 3": "https://www.iri.com/blog/wp-content/uploads/2021/12/darkshield-ocr-image-preprocessing-fig-3.png"
}

# ==== Sidebar Inputs ====
st.sidebar.header("üì• ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
input_method = st.sidebar.radio("‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û:", ["‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û", "‡∏õ‡πâ‡∏≠‡∏ô URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"])

search_keyword = st.sidebar.text_input("üîç ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)", placeholder="‡πÄ‡∏ä‡πà‡∏ô: VISA, ‡∏ö‡∏±‡∏ï‡∏£, ...")

# ==== Sidebar: Sample Images ====
sample_choice = None
if input_method == "‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á":
    for label, url in sample_images.items():
        st.sidebar.image(url, caption=label, use_container_width=True)
        if st.sidebar.button(f"‡πÉ‡∏ä‡πâ {label}"):
            sample_choice = url
            st.session_state.selected_sample_label = label

# ==== Main Title ====
st.title("üöó Text Recognition (OCR) + Keyword Search")
st.write("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)\n‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")

# ==== Image Selection Logic ====
images_to_process = []

if input_method == "‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á" and sample_choice:
    try:
        response = requests.get(sample_choice)
        image = Image.open(BytesIO(response.content)).convert("RGB")
        images_to_process.append((image, st.session_state.selected_sample_label))
        st.success(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î {st.session_state.selected_sample_label} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ")

elif input_method == "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û":
    uploaded_file = st.file_uploader("üì∑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", type=["jpg", "jpeg", "png"])
    if uploaded_file:
        image = Image.open(uploaded_file).convert("RGB")
        images_to_process.append((image, uploaded_file.name))

elif input_method == "‡∏õ‡πâ‡∏≠‡∏ô URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û":
    image_url = st.text_input("üîó ‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
    if image_url:
        try:
            response = requests.get(image_url)
            image = Image.open(BytesIO(response.content)).convert("RGB")
            images_to_process.append((image, "‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å URL"))
            st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å URL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å URL ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå")

# ==== OCR Processing ====
if images_to_process:
    found_in_any = False

    for img, label in images_to_process:
        st.image(img, caption=f"üì∏ {label}", use_container_width=True)

        img_array = np.array(img)

        with st.spinner(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô {label}..."):
            results = reader.readtext(img_array)

        draw = ImageDraw.Draw(img)

        try:
            font = ImageFont.truetype("arial.ttf", 30)
        except:
            font = ImageFont.load_default()

        found_texts = []
        matched = False

        for idx, (bbox, text, confidence) in enumerate(results, start=1):
            if confidence > 0.4:
                found_texts.append((idx, text, confidence))
                points = [tuple(point) for point in bbox]
                draw.line(points + [points[0]], fill="red", width=3)
                draw.text(points[0], str(idx), fill="yellow", font=font)

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                if search_keyword and search_keyword.lower() in text.lower():
                    matched = True
                    found_in_any = True

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå OCR
        st.image(img, caption=f"üü• ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô {label}", use_container_width=True)

        if found_texts:
            st.write(f"### üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÉ‡∏ô {label}:")
            for idx, text, conf in found_texts:
                st.write(f"{idx}. **{text}** ({conf*100:.2f}%)")
        else:
            st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô {label}")

        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÅ‡∏•‡∏∞‡πÄ‡∏à‡∏≠‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
        if search_keyword:
            if matched:
                st.success(f"‚úÖ ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ \"{search_keyword}\" ‡πÉ‡∏ô {label}")
            else:
                st.info(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ \"{search_keyword}\" ‡πÉ‡∏ô {label}")

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÑ‡∏´‡∏ô‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
    if search_keyword and not found_in_any:
        st.warning("üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡πÉ‡∏î ‡πÜ")

else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")

